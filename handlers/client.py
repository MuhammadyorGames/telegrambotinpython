from aiogram import types, Dispatcher
from create_bot import bot
import requests, datetime
from keyboards.client_kb import kb_client, urlkb
from config import open_weather_token
from data_base import sqlite_db


# @dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üèô', reply_markup=kb_client)
#     await bot.send_message(message.from_user.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ? üôÇ', reply_markup=kb_client)

async def get_weather(message: types.Message):
    
        code_to_smile = {
            "Clear": "–Ø—Å–Ω–æ ‚òÄ",
            "Clouds": "–û–±–ª–∞—á–Ω–æ ‚õÖ",
            "Rain": "–î–æ–∂–¥—å üåß",
            "Drizzle": "–î–æ–∂–¥—å üåß",
            "Thunderstorm": "–ì—Ä–æ–∑–∞ ‚õà",
            "Snow": "–°–Ω–µ–≥ üå®",
            "Mist": "–¢—É–º–∞–Ω üå´",
        }

        try:
            r = requests.get(
                f"http://api.openweathermap.org/data/2.5/weather?q={message.text.lower()}&appid={open_weather_token}&units=metric"
            )
            data = r.json()

            city = data["name"]
            cur_weather = data["main"]["temp"]

            weather_des = data["weather"][0]["main"]
            if weather_des in code_to_smile:
                wd = code_to_smile[weather_des]
            else:
                wd = "–°–∞–º –ø–æ—Å–º–æ—Ç—Ä–∏ —á—Ç–æ –∑–∞ –ø–æ–≥–æ–¥–∞ —è –Ω–µ –∑–Ω–∞—é!"

            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]
            sunrise_ts = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
            sunset_ts = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
            length_of_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
                data["sys"]["sunrise"])

            await message.reply(f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
                  f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n"
                  f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                  f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_ts}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_ts}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_day}\n"
                  f"***–•–æ—Ä–æ—à–µ–≥–æ –¥–ª—è!***")

        except:
            await message.reply("‚ùå Error ‚ùå")

def client_handler_register(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start'])
    # dp.register_message_handler(apps, commands=['apps'])
    dp.register_message_handler(get_weather)
